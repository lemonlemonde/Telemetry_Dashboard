syntax = "proto3";

package telemetry;


enum System {
    UNKNOWN_SYSTEM = 0;
    ENGINE = 1;
    FUEL_TANK = 2;
    AVIONICS = 3;
    TURBOPUMP = 4;
    GUIDANCE = 5;
    STAGE1 = 6;
    STAGE2 = 7;
}

enum TelemetryType {
    TEMPERATURE = 0;
    VELOCITY = 1;
    PRESSURE = 2;
}

service TelemetryService {
    // specific method 
    rpc GetTelemetryStream(TelemetryRequest) returns (stream TelemetryResponse);
}

// request all telemetry for all TelemetryType's
message TelemetryRequest {
}


message TelemetryResponse {
    string timestamp = 1;
    
    TelemetryType type = 4;
    
    // Use oneof for type-specific data
    oneof data {
        TemperatureData temperature = 5;
        // TODO: add velocity, pressure
        // VelocityData velocity = 6;
        // PressureData pressure = 7;
    }
}


message TemperatureData {
    string sensor_id = 1;
    System subsystem = 2;
    float temperature = 3;
    string unit = 4;
    
    uint32 status_bitmask = 5;

    int32 sequence_number = 6;
}

// TODO: add velocity + pressure
// struct Pressure_Schema {
//     // ISO 8601 UTC
//     std::string timestamp;
//     std::string sensor_id;
    
//     System subsystem;
    
//     float pressure;
//     std::string unit;
    
//     bool leak_detected;
// };

// struct Velocity_Schema {
//     // ISO 8601 UTC
//     std::string timestamp;
//     std::string sensor_id;

//     System subsystem;
//     float velocity_x;
//     float velocity_y;
//     float velocity_z;

//     std::string unit;

//     float vibration_mag;

    
// };
